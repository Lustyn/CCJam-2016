local args = { ... }

local flags = {
    ["eyes"] = {desc = "Changes cow's eyes.", alias = {"e"}},
    ["tongue"] = {desc = "Changes cow's tongue.", alias = {"t"}},
    ["thoughts"] = {desc = "Changes cow's bubble lines.", alias = {"T"}},
    ["think"] = {desc = "Changes the speechbubble to a thoughtbubble.", alias = {"q"}},
    ["download"] = {desc = "Downloads a cow file.", alias = {"d", "dl"}},
    ["output"] = {desc = "Outputs to a file or changes file output.", alias = {"o", "out"}},
    ["cow"] = {desc = "Chooses which cow file to load.", alias = {"f", "file", "c"}},
    ["list"] = {desc = "Lists installed cows.", alias = {"ls", "l"}},
    ["repolist"] = {desc = "Lists cows contained in the repo.", alias = {"rl", "rls"}},
    ["downloadall"] = {desc = "Downloads all cows from the repo.", alias = {"dla", "da"}},
    ["foreground"] = {desc = "Sets the cow foreground color.", alias = {"fg"}},
    ["background"] = {desc = "Sets the cow background color.", alias = {"bg"}},
    ["characterbackground"] = {desc = "Sets the background when a character is present", alias = {"cbg"}},
    ["clear"] = {desc = "Clears the screen before printing.", alias = {"cls"}}
}

function printHelp()
    if term.isColor() then term.setTextColor(colors.red) end
    print("(Press any key to continue scrolling)")
    if term.isColor() then term.setTextColor(colors.blue) end
    print("Usage: "..shell.getRunningProgram().." [text] [-flag [string]]")
    print("Flags:")
    for i,v in pairs(flags) do
        if term.isColor() then term.setTextColor(colors.lightBlue) end
        write(i..": ")
        if term.isColor() then term.setTextColor(colors.lightGray) end
        write(v.desc.." ")
        if term.isColor() then term.setTextColor(colors.lightBlue) end
        write("("..table.concat(v.alias, ", ")..")\n")
        os.pullEventRaw()
    end
end

if #args < 1 then
    printHelp()
    return
end

-- CONSTANTS
local cow_url = "https://github.com/justync7/CCJam-2016/raw/master/cows"
local cow_dir = "/cows/"
local cow_begin = "<<EOC;\n"
local cow_begin_alt = "<<\"EOC\";\n"
local cow_end = "\nEOC"
local cow_vars = {
    "thoughts",
    "eyes",
    "tongue"
}
local cow_vars_defaults = {
    ["thoughts"] = "\\",
    ["eyes"] = "oo",
    ["tongue"] = "  "
}

local function parseArgs(args)
    local current = 0
    local pargs = {}
    local tripped = false
    local pargs = {}
    local adding = false
    local addto = ""
    for i=1,#args do
        if args[i] and args[i]:sub(1,1) == "-" then
            tripped = true
            if not args[i+1] or args[i+1]:sub(1,1) == "-" then
                pargs[args[i]:sub(2)] = true
            elseif args[i+1] and args[i+1]:sub(1,1) ~= "\"" then
                pargs[args[i]:sub(2)] = args[i+1]
            end
        elseif args[i+1] and args[i+1]:sub(1,1) == "\"" then
            adding = true
            addto = pargs[args[i]:sub(2)]
            pargs[args[i]:sub(2)] = ""
        elseif adding then
            if args[i]:sub(-1) == "\"" then
                adding = false
            end
            pargs[addto] = pargs[addto].." ".. args[i]
        elseif not tripped then
            pargs["text"] = (pargs["text"] or "").." "..args[i]
        end
    end
    if pargs["text"] and pargs["text"]:sub(1,1) == " " then
        pargs["text"] = pargs["text"]:sub(2)
    end
    return pargs
end

function split(str, pat)
   local t = {}  -- NOTE: use {n = 0} in Lua-5.0
   local fpat = "(.-)" .. pat
   local last_end = 1
   local s, e, cap = str:find(fpat, 1)
   while s do
      if s ~= 1 or cap ~= "" then
	 table.insert(t,cap)
      end
      last_end = e+1
      s, e, cap = str:find(fpat, last_end)
   end
   if last_end <= #str then
      cap = str:sub(last_end)
      table.insert(t, cap)
   end
   return t
end

local function replaceVar(cow, var, data)
    return cow:gsub("$"..var, data)
end

local function max(linez)
    local m = 0
    for i, v in pairs(linez) do
        if v:len() > m then
            m = v:len()
        end
    end
    return m
end

local function lines(str)
  local t = {}
  local function helper(line) table.insert(t, line) return "" end
  helper((str:gsub("(.-)\r?\n", helper)))
  return t
end

local function pad(text, length)
	return text..string.rep(" ", length - text:len())
end

local function top(length)
    return string.rep("_", length+2)
end

local function bottom(length, p)
    return string.rep("-", length+2)
end

local function formatBubbleText(text, delimiters)
    text = text:gsub("\\n","\\"):gsub("\\", "\n")
    local linez = lines(text)
    local m = max(linez)
    local balloon = ""
    local delim = {}
    if #linez == 1 then
        balloon = " "..top(m).."\n"..delimiters.only[1].." "..linez[1].." "..delimiters.only[2].."\n".." "..bottom(m).."\n"
    else
        balloon = " "..top(m).."\n"
        for i,v in ipairs(linez) do
            if i==1 then
                delim = delimiters["first"]
            elseif i==#linez then
                delim = delimiters["last"]
            else
                delim = delimiters["middle"]
            end
            balloon = balloon..delim[1].." "..pad(v, m).." "..delim[2].."\n"
        end
        balloon = balloon.." "..bottom(m).."\n"
    end
    return balloon
end

local function count(tbl)
    local c = 0
    for i,v in pairs(tbl) do
        c = c+1
    end
    return c
end

local function isChar(char)
    if char ~= " " and char ~= "\n" then
        return true
    else
        return false
    end
end

local function say(text)
    local delimiters = {
        first = {"/", "\\"},
        middle = {"|", "|"},
        last = {"\\", "/"},
        only = {"<", ">"},
    }

    return formatBubbleText(text, delimiters)
end

local function think(text)
    local delimiters = {
        first = {"(", ")"},
        middle = {"(", ")"},
        last = {"(", ")"},
        only = {"(", ")"},
    }

    return formatBubbleText(text, delimiters)
end

local function findCow(cow)
    if fs.exists(cow_dir..cow) then
        return cow_dir..cow
    elseif fs.exists(cow_dir..cow..".cow") then
        return cow_dir..cow..".cow"
    elseif fs.exists(cow..".cow") then
        return cow..".cow"
    elseif fs.exists(cow) then
        return cow
    else
        return false
    end
end

local function readCow(cow)
    if cow:find(cow_begin_alt) then
        cow = cow:gsub(cow_begin_alt, cow_begin)
    end
    local _, start = cow:find(cow_begin)
    local stop, _ = cow:find(cow_end)
    cow = cow:sub(start, stop)
    return cow:sub(2)
end

local function getCowVars(cow)
    local vars = {}
    for k, v in pairs(cow_vars) do
        if cow:find("$"..v) then
            vars[v] = true
        else
            vars[v] = false
        end
    end
    return vars
end

local function formatCow(cow, options)
    if not options then
        options = {}
    end
    local cow = readCow(cow):gsub("\\\\","\\"):gsub("\\@","@"):gsub("\\$","$")
    local vars = getCowVars(cow)
    for k, v in pairs(vars) do
        if options[k] then
            if k == "tongue" and options[k]:len() < 2 then
                options[k] = options[k].." "
            end
            cow = replaceVar(cow, k, options[k])
        else
            cow = replaceVar(cow, k, cow_vars_defaults[k])
        end
    end
    return cow
end

function makeCow(cow, text, options, thinking)
    if thinking then
        return think(text)..formatCow(cow, options)
    else
        return say(text)..formatCow(cow, options)
    end
end

function makeCowFromFile(file, text, options, think)
    local check = findCow(file)
    if check and not fs.isDir(file) then
        local fi = fs.open(check, "r")
        local cow = fi.readAll()
        fi.close()
        return makeCow(cow, text, options, think)
    else
        error("File does not exist or is a directory.")
    end
end

function downloadCow(url)
    if not http.checkURL(url) then
        error("Invalid URL")
    else
        local req = http.get(url)
        if req then
            local cow = req.readAll()
            req.close()
            return cow
        else
            error("Download failed.")
        end
    end
end

function downloadCowToFile(url, file)
    local cow = downloadCow(url)
    local fi = fs.open(file, "w")
    fi.write(cow)
    fi.close()
end

function downloadCowList()
    local req = http.get(cow_url)
    if req then
        local list = req.readAll()
        req.close()
        local fi = fs.open(cow_dir.."cows", "w")
        fi.write(list)
        fi.close()
        if term.isColor() then term.setTextColor(colors.green) end
        print("Downloaded cow list.")
    else
        error("Repo download failed.")
    end
end

function listCows()
    local files = fs.list(cow_dir)
    local found = {}
    for i,v in pairs(files) do
        if v:find(".cow") then
            table.insert(found, v)
        end
    end
    if term.isColor() then term.setTextColor(colors.blue) end
    print("Installed cows:")
    if term.isColor() then term.setTextColor(colors.lightBlue) end
    print(table.concat(found, ", "))
end

function listDownloadableCows()
    if not fs.exists(cow_dir.."cows") then
        downloadCowList()    
    end
    local cow_list = loadfile(cow_dir.."cows")()
    if term.isColor() then term.setTextColor(colors.blue) end
    print("Available cows:")
    if term.isColor() then term.setTextColor(colors.lightBlue) end
    for i, v in pairs(cow_list) do
        write(i..", ")
    end
    write("\n")
end

local pArgs = parseArgs(args)
local options = {
    eyes = pArgs["e"] or pArgs["eyes"] or nil,
    tongue = pArgs["t"] or pArgs["tongue"] or nil,
    thoughts = pArgs["T"] or pArgs["thoughts"] or nil,
    background = pArgs["background"] or pArgs["bg"] or nil,
    foreground = pArgs["foreground"] or pArgs["fg"] or nil,
    characterbackground = pArgs["characterbackground"] or pArgs["cbg"] or nil
}
local think = pArgs["q"] or pArgs["think"] or false
local cow_file = pArgs["c"] or pArgs["cow"] or pArgs["f"] or pArgs["file"] or nil
if not fs.exists(cow_dir) then
    fs.makeDir(cow_dir)
    downloadCowToFile("https://github.com/piuccio/cowsay/raw/master/cows/default.cow", cow_dir.."default.cow")
end

if (pArgs["d"] and type(pArgs["d"]) == "string") or (pArgs["download"] and type(pArgs["download"]) == "string") or (pArgs["dl"] and type(pArgs["dl"]) == "string") then
    local filename
    if pArgs["o"] or pArgs["out"] or pArgs["output"] then
        filename = pArgs["o"] or pArgs["out"] or pArgs["output"]
    else
        local parts = split(pArgs["d"],"/")
        filename = parts[#parts]
    end
    downloadCowToFile(pArgs["d"], filename)
    if term.isColor() then term.setTextColor(colors.green) end
    print("Downloaded "..filename)
elseif pArgs["list"] or pArgs["l"] or pArgs["ls"] then
    listCows()
elseif pArgs["repolist"] or pArgs["rl"] or pArgs["rls"] then
    listDownloadableCows()
elseif pArgs["downloadall"] or pArgs["dla"] or pArgs["da"] then
    if not fs.exists(cow_dir.."cows") then
        downloadCowList()    
    end
    local cow_list = dofile(cow_dir.."cows")
    for i,v in pairs(cow_list) do
        downloadCowToFile(v, cow_dir..i)
    end
    if term.isColor() then term.setTextColor(colors.green) end
    print("Downloaded "..count(cow_list).." cows.")
elseif pArgs["text"] and pArgs["text"]:len() > 0 then
    if cow_file == nil then
        cow_file = "default.cow"
    end
    if term.isColor() then term.setTextColor(colors[options.foreground or "white"] or colors.white) end
    if term.isColor() then term.setBackgroundColor(colors[options.background or "black"] or colors.black) end
    if pArgs["clear"] or pArgs["cls"] then
        term.clear()
        term.setCursorPos(1,1)
    end
    local cow = makeCowFromFile(cow_file, pArgs["text"], options, think)
    if pArgs["o"] or pArgs["out"] or pArgs["output"] then
        filename = pArgs["o"] or pArgs["out"] or pArgs["output"]
        local fi = fs.open(filename, "w")
        fi.write(cow)
        fi.close()
        return
    end
    for i=1,#cow do
        local char = cow:sub(i,i)
        local prechar = cow:sub(i-1, i-1)
        local postchar = cow:sub(i+1, i+1)
        if i-1 == -1 then
            prechar = " "
        end
        if i+1 > #cow then
            postchar = " "
        end
        if isChar(char) or isChar(prechar) or isChar(postchar) then
            if term.isColor() then term.setBackgroundColor(colors[options.characterbackground or options.background or "black"] or colors.black) end
        else
            if term.isColor() then term.setBackgroundColor(colors[options.background or "black"] or colors.black) end
        end
        if prechar and char == "\n" then
            write(" ")
        end
        write(char)
    end
    term.setTextColor(colors.white)
    term.setBackgroundColor(colors.black)
else
    printHelp()
end